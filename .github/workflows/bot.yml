name: Testing Bot
on: pull_request
jobs:
  build:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest
  Initiate:
    name: Testing Bot
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: mkdir -p output/
      - run: echo "You have done a pull request" > output/results.txt
      - uses: actions/upload-artifact@v1
        with:
          name: results
          path: output
      - uses: actions/download-artifact@v1
        with:
          name: results
      - name: comment PR
        uses: machine-learning-apps/pr-comment@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          path: results/results.txt
  Status:
    name: Status Bot
    runs-on: ubuntu-latest
    steps:
      - name: Wait for test to succeed
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-test
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          check-name: 'Run Tests (3.7)'
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Do something with a passing build
        if: steps.wait-for-build.outputs.conclusion == 'success'
        run: echo "You have passed all of the tests" > output/test_results.txt
        

      - name: Do something with a failing build
        if: steps.wait-for-build.outputs.conclusion == 'failure'
        run: echo "You have failed a test" > output/test_results.txt
        
      - uses: actions/upload-artifact@v1
        with:
          name: test_results
          path: output
      - uses: actions/download-artifact@v1
        with:
          name: test_results
      - name: comment PR
        uses: machine-learning-apps/pr-comment@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          path: test_results/test_results.txt
